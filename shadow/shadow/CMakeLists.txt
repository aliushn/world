set(shadow_cpu_src)
set(shadow_gpu_src)
set(shadow_examples_src)
set(shadow_server_src)
set(shadow_client_src)
set(shadow_test_src)
set(shadow_tools_src)

add_subdirectory(core)
add_subdirectory(examples)
add_subdirectory(operators)
add_subdirectory(proto)
add_subdirectory(service)
add_subdirectory(tools)
add_subdirectory(util)

if (${BUILD_TEST})
  add_subdirectory(test)
endif ()

include_directories(".")

if (${USE_CUDA} AND CUDA_FOUND)
  cuda_add_library(shadow ${shadow_cpu_src} ${shadow_gpu_src})
else ()
  add_library(shadow ${shadow_cpu_src})
endif ()
target_link_libraries(shadow ${Shadow_LINKER_LIBS})
if (${USE_Protobuf} AND Protobuf_FOUND)
  target_link_libraries(shadow ${Shadow_PROTO_LIB} ${Protobuf_LIBRARIES})
endif ()
install(TARGETS shadow DESTINATION ${Shadow_INSTALL_LIB_PREFIX})
install(FILES core/network.hpp core/params.hpp DESTINATION ${Shadow_INSTALL_INCLUDE_PREFIX}/core)
if (${USE_Protobuf} AND Protobuf_FOUND)
  install(DIRECTORY proto DESTINATION ${Shadow_INSTALL_INCLUDE_PREFIX} FILES_MATCHING PATTERN "*.hpp" PATTERN "*.h")
endif ()

if (BUILD_SHARED_LIBS)
  set(Shadow_LIB shadow)
else ()
  add_whole_archive_flag(shadow Shadow_LIB)
endif ()

if (${BUILD_EXAMPLES})
  add_executable(test_demo "examples/test_demo.cpp" ${shadow_examples_src})
  target_link_libraries(test_demo ${Shadow_LIB})
  install(TARGETS test_demo DESTINATION ${Shadow_INSTALL_BIN_PREFIX})
endif ()

if (${BUILD_TOOLS} AND Protobuf_FOUND)
  add_executable(convert ${shadow_tools_src})
  target_compile_definitions(convert PRIVATE -DUSE_Protobuf)
  target_link_libraries(convert ${Shadow_PROTO_LIB} ${Protobuf_LIBRARIES})
  install(TARGETS convert DESTINATION ${Shadow_INSTALL_BIN_PREFIX})
endif ()

if (${BUILD_SERVICE} AND Protobuf_FOUND AND gRPC_FOUND)
  add_executable(shadow_server ${shadow_server_src} ${shadow_examples_src})
  target_link_libraries(shadow_server ${Shadow_LIB} ${Shadow_GRPC_PROTO_LIB} ${gRPC_LIBRARIES} ${Protobuf_LIBRARIES})
  target_link_libraries(shadow_server ${CMAKE_THREAD_LIBS_INIT} ${ZLIB_LIBRARIES})
  install(TARGETS shadow_server DESTINATION ${Shadow_INSTALL_BIN_PREFIX})

  add_executable(shadow_client ${shadow_client_src})
  target_link_libraries(shadow_client ${Shadow_GRPC_PROTO_LIB} ${gRPC_LIBRARIES} ${Protobuf_LIBRARIES})
  target_link_libraries(shadow_client ${CMAKE_THREAD_LIBS_INIT} ${ZLIB_LIBRARIES})
  install(TARGETS shadow_client DESTINATION ${Shadow_INSTALL_BIN_PREFIX})
endif ()

if (${BUILD_TEST})
  add_executable(test_shadow ${shadow_test_src})
  target_link_libraries(test_shadow ${Shadow_LIB} ${GoogleTest_LIBRARIES})
  install(TARGETS test_shadow DESTINATION ${Shadow_INSTALL_BIN_PREFIX})
endif ()

if (${BUILD_LINT})
  find_program(ClangFormat "clang-format")
  if (ClangFormat)
    set(shadow_src ${shadow_cpu_src} ${shadow_gpu_src}
                   ${shadow_examples_src}
                   ${shadow_server_src} ${shadow_client_src}
                   ${shadow_test_src} ${shadow_tools_src})
    add_custom_target(shadow_lint ${ClangFormat} -style="Google" -i ${shadow_src})
  else ()
    message(WARNING "Could not find clang-format executable")
  endif ()
endif ()
